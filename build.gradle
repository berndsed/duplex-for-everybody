import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'groovy'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

group 'de.kieseltaucher.duplex.scan.for.everybody'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

configurations {
    aws {
        canBeConsumed = true
        canBeResolved = false
    }
    service {
        canBeConsumed = true
        canBeResolved = false
    }
    implementation.extendsFrom aws, service
    
    awsRuntime {
        canBeResolved = true
        canBeConsumed = false
    }
    awsRuntime.extendsFrom aws, service

    serviceRuntime {
        canBeResolved = true
        canBeConsumed = false
    }
    serviceRuntime.extendsFrom service
}

dependencies {
    service 'org.codehaus.groovy:groovy:2.5.8'
    service 'org.codehaus.groovy:groovy-json:2.5.8'
    service 'org.apache.pdfbox:pdfbox:2.0.24'
    aws 'com.amazonaws:aws-lambda-java-core:1.2.1'
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
}

def groovySource = fileTree layout.projectDirectory.file('src/main/groovy')
def groovyShellScript = file layout.projectDirectory.file('distributions/groovy-script/simplex2duplex.groovy')

task asGroovyScript() {
    description 'Creates a groovy script'
    group 'distribution'

    doFirst {
        mkdir layout.buildDirectory.file('distributions')
    }

    /*
     * Merges classes from core and service into one executable groovy script
     *
     * 1. Filter and parse library classes from core and service
     * - collects all import statements targeting libraries.
     * - collects all code lines that are not a package declaration or an import statement 
     * 
     * 2. Filter and parse a skeleton groovy script
     * - collects all grab statements
     * - collects all import statements targeting libraries
     * - all remaining lines are considered code lines
     * 
     * 3. Writes the collected statements to a file 
     * - Grab statements
     * - import statements
     * - the skeleton groovy script
     * - the classes in core and service
     * 
     */
    doLast {
        def isImportLine = (~' *import.*').asMatchPredicate()
        def isOwnPackage = (~'.*de\\.kieseltaucher\\.duplex\\.foreverybody.*').asMatchPredicate()
        def isCoreOrServicePackage = (~'.*de\\.kieseltaucher\\.duplex\\.foreverybody\\.(core|service)').asMatchPredicate()

        def imports = new HashSet()
        def code = []

        // parse all classes in core and service
        def libSourceLines = groovySource
                .filter { file -> !file.isDirectory() }
                .collect { file -> file.text.split('\n') }
                .findAll { fileLines -> fileLines.length > 0 }
                .findAll { fileLines -> isCoreOrServicePackage.test(fileLines[0]) }
                .flatten()
                .findAll { sourceLine -> !isOwnPackage.test(sourceLine) }
        libSourceLines.each {
            if (isImportLine.test(it)) {
                imports.add it
            } else {
                code.add it
            }
        }

        def isGrabLine = (~' *@groovy\\.lang\\.Grab\\(.*\\).*').asMatchPredicate()
        def grabs = []
        def scriptCode = []
        // parse groovy script skeleton
        groovyShellScript.text.split('\n')
                .findAll { !isOwnPackage.test(it) }
                .each {
                    if (isGrabLine.test(it)) {
                        grabs.add it
                    } else {
                        scriptCode.add it
                    }
                }

        def target = layout.buildDirectory.file("distributions/simplex-2-duplex-${properties.project.version}.groovy")
        def infoLine = "// Generated at ${java.time.LocalDate.now()} (Version ${properties.project.version})\n"
        def targetFile = target.get().asFile
        targetFile.with {
            write infoLine
            append grabs.join('\n')
            append '\n'
            append imports.join('\n')
            append '\n'
            append scriptCode.join('\n')
            append '\n'
            append code.join('\n')
        }
    }

}

task asAwsLambdaApp(type: Zip) {
    description 'Creates an aws lambda deployment package without libs (see awsLambdaLibLayer)'
    group 'distribution'

    from compileGroovy
    archiveAppendix = 'aws-lambda-app'
}

task awsLambdaLibLayer(type: Zip) {
    description 'Creates an aws lambda deployment package containing the lib layer'
    group 'distribution'

    into('java/lib') {
        from configurations.awsRuntime
    }
    archiveAppendix = 'aws-lambda-lib-layer'
}

task asAwsLambda(type: Zip) {
    description 'Creates an aws lambda deployment package'
    group 'distribution'

    from compileGroovy
    into('lib') {
        from configurations.awsRuntime
    }
    archiveAppendix = 'aws-lambda-all'
}

task asStandaloneServer(type: ShadowJar) {
    description 'Creates a distribution with an executable uber jar starting a web server'
    group 'distribution'

    manifest {
        attributes 'Main-Class': 'de.kieseltaucher.duplex.foreverybody.app.server.HttpServerControl'
    }

    from compileGroovy
    configurations = [project.configurations.serviceRuntime]
    destinationDirectory = layout.buildDirectory.dir('distribution')
    archiveAppendix = 'standalone-server'
}
